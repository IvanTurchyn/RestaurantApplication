{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass AuthService {\n  constructor(http) {\n    this.http = http;\n    const storedUser = localStorage.getItem('currentUser');\n    this.currentUserSubject = new BehaviorSubject(storedUser ? JSON.parse(storedUser) : null);\n    this.currentUser = this.currentUserSubject.asObservable();\n  }\n  get currentUserValue() {\n    return this.currentUserSubject.value;\n  }\n  login(username, password) {\n    // Replace with your actual Spring Boot API URL\n    return this.http.post(`http://localhost:8080/api/login`, {\n      username,\n      password\n    }).pipe(map(user => {\n      // Store user details and JWT token in local storage to keep user logged in between page refreshes\n      localStorage.setItem('currentUser', JSON.stringify(user));\n      this.currentUserSubject.next(user);\n      return user;\n    }));\n  }\n  logout() {\n    // Remove user from local storage and set current user to null\n    localStorage.removeItem('currentUser');\n    this.currentUserSubject.next(null);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});\nexport { AuthService };","map":{"version":3,"names":["BehaviorSubject","map","AuthService","constructor","http","storedUser","localStorage","getItem","currentUserSubject","JSON","parse","currentUser","asObservable","currentUserValue","value","login","username","password","post","pipe","user","setItem","stringify","next","logout","removeItem","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\Записи занятий ClickMeeteeng\\Desktop\\Inzeneria oprogramowania\\Cwiczenia\\NEW_projekt\\Restaurant-app\\frontend\\restaurant-app\\src\\app\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport {User} from \"../models/user\";\n\n@Injectable({ providedIn: 'root' })\nexport class AuthService {\n  private currentUserSubject: BehaviorSubject<User | null>;\n  public currentUser: Observable<User | null>;\n\n  constructor(private http: HttpClient) {\n    const storedUser = localStorage.getItem('currentUser');\n    this.currentUserSubject = new BehaviorSubject<User | null>(storedUser ? JSON.parse(storedUser) : null);\n    this.currentUser = this.currentUserSubject.asObservable();\n  }\n\n  public get currentUserValue(): User | null {\n    return this.currentUserSubject.value;\n  }\n\n  login(username: string, password: string) {\n    // Replace with your actual Spring Boot API URL\n    return this.http.post<any>(`http://localhost:8080/api/login`, { username, password })\n      .pipe(map(user => {\n        // Store user details and JWT token in local storage to keep user logged in between page refreshes\n        localStorage.setItem('currentUser', JSON.stringify(user));\n        this.currentUserSubject.next(user);\n        return user;\n      }));\n  }\n\n  logout() {\n    // Remove user from local storage and set current user to null\n    localStorage.removeItem('currentUser');\n    this.currentUserSubject.next(null);\n  }\n}\n"],"mappings":"AAEA,SAASA,eAAe,QAAoB,MAAM;AAClD,SAASC,GAAG,QAAQ,gBAAgB;;;AAGpC,MACaC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IACtB,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACtD,IAAI,CAACC,kBAAkB,GAAG,IAAIR,eAAe,CAAcK,UAAU,GAAGI,IAAI,CAACC,KAAK,CAACL,UAAU,CAAC,GAAG,IAAI,CAAC;IACtG,IAAI,CAACM,WAAW,GAAG,IAAI,CAACH,kBAAkB,CAACI,YAAY,EAAE;EAC3D;EAEA,IAAWC,gBAAgBA,CAAA;IACzB,OAAO,IAAI,CAACL,kBAAkB,CAACM,KAAK;EACtC;EAEAC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC;IACA,OAAO,IAAI,CAACb,IAAI,CAACc,IAAI,CAAM,iCAAiC,EAAE;MAAEF,QAAQ;MAAEC;IAAQ,CAAE,CAAC,CAClFE,IAAI,CAAClB,GAAG,CAACmB,IAAI,IAAG;MACf;MACAd,YAAY,CAACe,OAAO,CAAC,aAAa,EAAEZ,IAAI,CAACa,SAAS,CAACF,IAAI,CAAC,CAAC;MACzD,IAAI,CAACZ,kBAAkB,CAACe,IAAI,CAACH,IAAI,CAAC;MAClC,OAAOA,IAAI;IACb,CAAC,CAAC,CAAC;EACP;EAEAI,MAAMA,CAAA;IACJ;IACAlB,YAAY,CAACmB,UAAU,CAAC,aAAa,CAAC;IACtC,IAAI,CAACjB,kBAAkB,CAACe,IAAI,CAAC,IAAI,CAAC;EACpC;;AA7BWrB,WAAW,C;mBAAXA,WAAW,EAAAwB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAX3B,WAAW,C;SAAXA,WAAW;EAAA4B,OAAA,EAAX5B,WAAW,CAAA6B,IAAA;EAAAC,UAAA,EADE;AAAM;SACnB9B,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}