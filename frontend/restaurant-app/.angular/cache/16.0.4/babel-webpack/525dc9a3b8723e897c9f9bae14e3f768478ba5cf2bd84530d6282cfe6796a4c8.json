{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../auth/auth.service\";\nclass RoleGuard {\n  constructor(router, authService) {\n    this.router = router;\n    this.authService = authService;\n  }\n  canLoad(route, segments) {\n    const user = this.authService.currentUserValue;\n    if (!user) {\n      void this.router.navigate(['/login']);\n      return false;\n    }\n    const requiredRoles = route.data && route.data['roles'];\n    if (!requiredRoles) {\n      return true;\n    }\n    const userRole = user['role'];\n    if (!requiredRoles.includes(userRole)) {\n      void this.router.navigate(['/login']);\n      return false;\n    }\n    return true;\n  }\n}\nRoleGuard.ɵfac = function RoleGuard_Factory(t) {\n  return new (t || RoleGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthService));\n};\nRoleGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RoleGuard,\n  factory: RoleGuard.ɵfac,\n  providedIn: 'root'\n});\nexport { RoleGuard };","map":{"version":3,"names":["RoleGuard","constructor","router","authService","canLoad","route","segments","user","currentUserValue","navigate","requiredRoles","data","userRole","includes","i0","ɵɵinject","i1","Router","i2","AuthService","factory","ɵfac","providedIn"],"sources":["D:\\Записи занятий ClickMeeteeng\\Desktop\\Inzeneria oprogramowania\\Cwiczenia\\RestaurantApplication\\frontend\\restaurant-app\\src\\app\\guards\\role.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CanLoad, UrlTree, Router, Route, UrlSegment } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from \"../auth/auth.service\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RoleGuard implements CanLoad {\r\n\r\n  constructor(private router: Router, private authService: AuthService) { }\r\n\r\n  canLoad(route: Route, segments: UrlSegment[]): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n\r\n    const user = this.authService.currentUserValue;\r\n\r\n    if (!user) {\r\n      void this.router.navigate(['/login']);\r\n      return false;\r\n    }\r\n\r\n    const requiredRoles = route.data && route.data['roles'];\r\n\r\n    if (!requiredRoles) {\r\n      return true;\r\n    }\r\n\r\n    const userRole = (user as any)['role'];\r\n\r\n    if (!requiredRoles.includes(userRole)) {\r\n      void this.router.navigate(['/login']);\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n"],"mappings":";;;AAKA,MAGaA,SAAS;EAEpBC,YAAoBC,MAAc,EAAUC,WAAwB;IAAhD,KAAAD,MAAM,GAANA,MAAM;IAAkB,KAAAC,WAAW,GAAXA,WAAW;EAAiB;EAExEC,OAAOA,CAACC,KAAY,EAAEC,QAAsB;IAE1C,MAAMC,IAAI,GAAG,IAAI,CAACJ,WAAW,CAACK,gBAAgB;IAE9C,IAAI,CAACD,IAAI,EAAE;MACT,KAAK,IAAI,CAACL,MAAM,CAACO,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MACrC,OAAO,KAAK;;IAGd,MAAMC,aAAa,GAAGL,KAAK,CAACM,IAAI,IAAIN,KAAK,CAACM,IAAI,CAAC,OAAO,CAAC;IAEvD,IAAI,CAACD,aAAa,EAAE;MAClB,OAAO,IAAI;;IAGb,MAAME,QAAQ,GAAIL,IAAY,CAAC,MAAM,CAAC;IAEtC,IAAI,CAACG,aAAa,CAACG,QAAQ,CAACD,QAAQ,CAAC,EAAE;MACrC,KAAK,IAAI,CAACV,MAAM,CAACO,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MACrC,OAAO,KAAK;;IAGd,OAAO,IAAI;EACb;;AA3BWT,SAAS,C;mBAATA,SAAS,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,WAAA;AAAA;AAATnB,SAAS,C;SAATA,SAAS;EAAAoB,OAAA,EAATpB,SAAS,CAAAqB,IAAA;EAAAC,UAAA,EAFR;AAAM;SAEPtB,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}